/*!
 * Copyright (c) 2018 BlackBerry.  All Rights Reserved.
 * 
 * You must obtain a license from and pay any applicable license fees to
 * BlackBerry before you may reproduce, modify or distribute this software, or
 * any work that includes all or part of this software.
 * 
 * The BBM Enterprise SDK includes third party code.  For third party licenses
 * see: THIRDPARTY_LICENSES.txt.
 * 
 */
/*! v1.2.0-rc16 */
module.exports=function(e){var r={};function t(i){if(r[i])return r[i].exports;var n=r[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=r,t.d=function(e,r,i){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:i})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=133)}({133:function(e,r,t){"use strict";const i=t(134),n=t(135),o=t(136),s=t(18);function a(e,r){if(r<=e.byteLength)return e;const t=Buffer.alloc(r);return e.copy(t,r-e.byteLength,0),t}const c=i.define("DssSigValue",function(){this.seq().obj(this.key("r").int(),this.key("s").int())}),u=i.define("ECPublicKey",function(){this.seq().obj(this.key("algorithmIdentifier").seqof().obj(this.key("algorithm").objid(),this.key("parameters").objid().optional()),this.key("publicKey").bitstr())}),y=i.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").explicit(0).objid().optional(),this.key("publicKey").explicit(1).bitstr().optional())}),l=[1,3,132,0,35],p=[1,2,840,10045,2,1];e.exports={digest:(e,r)=>{let t;switch(e){case o.DigestAlgorithm.SHA256:t="sha256";break;case o.DigestAlgorithm.SHA512:t="sha512";break;default:return Promise.reject(new Error("Unsupport digest algorithm: "+e))}const i=s.createHash(t);return i.update(Buffer.from(r)),Promise.resolve(i.digest())},encrypt:(e,r,t)=>{const i=s.createCipheriv("aes-256-ctr",Buffer.from(r),e);return Promise.resolve(i.update(t))},decrypt:(e,r,t)=>new Promise(function(i,n){try{const o=s.createDecipheriv("aes-256-ctr",Buffer.from(r),e);i(new Uint8Array(o.update(t)))}catch(e){n(new Error(e))}}),authEncrypt:(e,r,t)=>new Promise(function(i){const n=s.createCipheriv("aes-256-gcm",t,r);let o=new Uint8Array(n.update(e));n.final(),i({content:o,tag:new Uint8Array(n.getAuthTag())})}),authDecrypt:(e,r,t)=>new Promise(function(i){const n=s.createDecipheriv("aes-256-gcm",t,r);n.setAuthTag(e.tag);let o=new Uint8Array(n.update(e.content));n.final(),i(o)}),sign:(e,r)=>{const t=y.encode({version:1,privateKey:e,parameters:l},"pem",{label:"EC PRIVATE KEY"}),i=()=>{const e=s.createSign("sha512");return e.update(r),e.sign(t)};let n;try{n=i()}catch(e){console.log("Failed, try again"),n=i()}const o=c.decode(n,"der");return Promise.resolve({r:new Uint8Array(a(o.r.toBuffer(),66)),s:new Uint8Array(a(o.s.toBuffer(),66))})},verify:(e,r,t)=>{const i=u.encode({algorithmIdentifier:{algorithm:p,parameters:l},publicKey:{data:e}},"pem",{label:"PUBLIC KEY"}),o=c.encode({r:new n(r.r,16),s:new n(r.s,16)}),a=s.createVerify("sha512");return a.update(t),Promise.resolve(a.verify(i,o))},deriveBits:(e,r)=>{const t=s.createECDH("secp521r1");return t.setPrivateKey(r),Promise.resolve(new Uint8Array(t.computeSecret(e)))},generateAesKey:()=>Promise.resolve(Buffer.from(s.randomBytes(32))),generateEcKey:()=>{const e=s.createECDH("secp521r1");return e.generateKeys(),Promise.resolve({publicKey:e.getPublicKey(),privateKey:a(e.getPrivateKey(),66)})},exportAesKey:e=>Promise.resolve(new Uint8Array(e)),exportEcPublicKey:e=>Promise.resolve(new Uint8Array(e)),exportEcPrivateKey:e=>Promise.resolve(new Uint8Array(e)),importAesKey:e=>Promise.resolve(Buffer.from(e)),importPublicEcKey:e=>133!==e.byteLength?Promise.reject(new Error("Invalid public key size="+e.byteLength)):Promise.resolve(Buffer.from(e)),importPrivateEcKey:e=>66!==e.byteLength?Promise.reject(new Error("Invalid EC key size: "+e.byteLength)):Promise.resolve(Buffer.from(e)),getRandomValues:e=>(e.set(s.randomBytes(e.byteLength)),e),DigestAlgorithm:o.DigestAlgorithm,KeyType:o.KeyType}},134:function(e,r){e.exports=require("asn1.js")},135:function(e,r){e.exports=require("bn.js")},136:function(e,r,t){"use strict";e.exports={DigestAlgorithm:{SHA256:0,SHA512:1}}},18:function(e,r){e.exports=require("crypto")}});