/*!
 * Copyright (c) 2018 BlackBerry.  All Rights Reserved.
 * 
 * You must obtain a license from and pay any applicable license fees to
 * BlackBerry before you may reproduce, modify or distribute this software, or
 * any work that includes all or part of this software.
 * 
 * The BBM Enterprise SDK includes third party code.  For third party licenses
 * see: THIRDPARTY_LICENSES.txt.
 * 
 */
/*! v1.2.0-rc16 */
module.exports=function(r){var n={};function t(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return r[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=r,t.c=n,t.d=function(r,n,e){t.o(r,n)||Object.defineProperty(r,n,{configurable:!1,enumerable:!0,get:e})},t.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return t.d(n,"a",n),n},t.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},t.p="",t(t.s=69)}({69:function(r,n,t){"use strict";const e=t(70);r.exports={argon2kdf:(r,n,t,o)=>(o=o||"argon2.wasm",fetch(o,{credentials:"same-origin"}).then(r=>{if(!r.ok)throw new Error("argon2kdf: failed to load wasm from "+o);return r.arrayBuffer()}).then(o=>e.argon2kdf(o,r,n,t)))}},70:function(r,n,t){"use strict";r.exports={argon2kdf:(r,n,t,e)=>{if(e=e||new Uint8Array,!(n instanceof Uint8Array&&t instanceof Uint8Array&&e instanceof Uint8Array))throw new Error("Invalid arguments");const o=1024,a=4,i=new WebAssembly.Memory({initial:256,maximum:256}),s=new Uint8Array(i.buffer);function f(r){return 16*Math.ceil(r/16)}const u=f(o+3344),c=f(u+4),l=c+131072,m=f(l);return new Uint32Array(i.buffer)[u>>2]=m,function(){function f(){return new Uint32Array(i.buffer)[u>>2]}const m={env:{memory:i,memoryBase:o,table:new WebAssembly.Table({initial:a,maximum:a,element:"anyfunc"}),tableBase:0,DYNAMICTOP_PTR:u,STACKTOP:c,STACK_MAX:l,getTotalMemory:()=>s.length,_emscripten_memcpy_big:(r,n,t)=>(s.set(s.subarray(n,n+t),r),r),abort:r=>{throw new Error(`argon2kdf: abort(${r})`)},_abort:r=>{throw new Error(`argon2kdf: _abort(${r})`)},abortOnCannotGrowMemory:()=>{const r=f();throw new Error("argon2kdf: abortOnCannotGrowMemory(): "+`*DYNAMICTOP_PTR=${r}`)},enlargeMemory:()=>{const r=f();throw new Error("argon2kdf: enlargeMemory() is not supported: "+`*DYNAMICTOP_PTR=${r}`)},___setErrNo:()=>{}}};return WebAssembly.instantiate(r,m).then(function(r){return function(r){function o(n){if(n<0)throw new Error(`argon2kdf: malloc(${n}) invalid argument`);const t=r._malloc(n);if(0===t)throw new Error(`argon2kdf: malloc(${n}) returned NULL`);return{ptr:t,size:n}}function a(r){const n=o(r.length);return s.set(r,n.ptr),n}const f=a(n),u=a(t),c=a(e),l=o(32),m=o(72);{const r=new Uint32Array(i.buffer,m.ptr,m.size);r.fill(0),r[0]=l.ptr,r[1]=l.size,r[2]=u.ptr,r[3]=u.size,r[4]=f.ptr,r[5]=f.size,r[8]=c.ptr,r[9]=c.size,r[10]=15,r[11]=8192,r[12]=1,r[13]=1,r[14]=19,r[17]=3}const w=r._argon2_ctx(m.ptr,2);if(0!==w)throw new Error(`argon2kdf: Error ${w}: `+(g=w,function(r){if(0===r)return null;const n=s.subarray(r),t=n.indexOf(0),e=n.subarray(0,t);let o="";for(let r=0;r<e.length;r++){const n=e[r];n<128&&(o+=String.fromCharCode(n))}return o}(r._argon2_error_message(g))));var g;return s.slice(l.ptr,l.ptr+l.size)}(r.instance.exports)})}()}}}});